#+title: Tapis
#+author: Chahak Mehta
#+date: <2023-01-03 Tue>
#+property: header-args :session tapis :eval no-export :exports both :async yes

* =tapis-cli=

#+begin_quote
Tapis CLI is a human-friendly, scriptable command line interface, implemented in Python, that helps scientists and engineers build and manage scalable computational and data science workflow projects using the [[https://tacc-cloud.readthedocs.io/projects/agave/en/latest/][Tapis]] platform.
#+end_quote

#+begin_src shell
tapis --version
#+end_src

#+RESULTS:
: tapis 1.0.6

To initialize a host, run ~tapis auth init~

#+begin_src shell :results raw
tapis auth init
#+end_src

#+RESULTS:
+--------------------+----------------------------------+
| Field              | Value                            |
+--------------------+----------------------------------+
| tenant_id          | designsafe                       |
| username           | chahak                           |
| api_key            | Q***************************     |
| access_token       | f******************************* |
| expires_at         | Sat Jan  7 17:52:20 2023         |
| verify             | True                             |
| registry_url       | https://index.docker.io          |
| registry_username  | chahak                           |
| registry_password  | a*********U                      |
| registry_namespace | chahak                           |
+--------------------+----------------------------------+

To list the files present in my default folder, I simply use the ~tapis files list~ command with the default storage location.
#+begin_src shell :results raw
tapis files list agave://designsafe.storage.default/chahak/
#+end_src

#+RESULTS:
+--------------------+--------------+--------+
| name               | lastModified | length |
+--------------------+--------------+--------+
| test-datadepot.txt | 4 hours ago  |      0 |
+--------------------+--------------+--------+

In this call, the =designsafe.storage.default= is the /systemId/ where the data is stored and /chahak/ is my username (and here, the default path). Both these information can be gleaned from the URL on the browser. For example, if the url is

#+begin_quote
https://www.designsafe-ci.org/data/browser/public/designsafe.storage.community/Jupyter%20Notebooks%20for%20Civil%20Engineering%20Courses/University_of_Washington/freeFieldEffectiveJupyter
#+end_quote

then, ~systemId=designsafe.storage.community~ and ~path=Jupyter%20Notebooks%20for%20Civil%20Engineering%20Courses~. Therefore, the call would begin

#+begin_src shell :results raw
tapis files list agave://designsafe.storage.community/Jupyter%20Notebooks%20for%20Civil%20Engineering%20Courses/University_of_Washington/freeFieldEffectiveJupyter
#+end_src

#+RESULTS:
+---------------------------------------------------------------+--------------+--------+
| name                                                          | lastModified | length |
+---------------------------------------------------------------+--------------+--------+
| ShortReport.rst                                               | 8 months ago |   1380 |
| ShortReport.tex                                               | 8 months ago |   1863 |
| exampleDescription.pptx                                       | 8 months ago |  51605 |
| freeFieldEffective.tcl                                        | 8 months ago |  17925 |
| freeFieldEffectiveJupyter_community.ipynb                     | 8 months ago | 139950 |
| freeFieldEffectiveJupyter_community_2022-07-25 22-40-57.ipynb | 6 months ago | 140107 |
| macros.tex                                                    | 8 months ago |   1954 |
| plotAcc.py                                                    | 8 months ago |   1626 |
| plotPorepressure.py                                           | 8 months ago |    871 |
| plotProfile.py                                                | 8 months ago |   2791 |
| plotStressStrain.py                                           | 8 months ago |    620 |
| respSpectra.py                                                | 8 months ago |   2340 |
| schematic.eps                                                 | 8 months ago | 908760 |
| schematic.png                                                 | 8 months ago |   5246 |
| short.tex                                                     | 8 months ago |   3346 |
| untitled.py                                                   | 8 months ago |      0 |
| velocity.input                                                | 8 months ago | 100260 |
+---------------------------------------------------------------+--------------+--------+

Similarly, if we want the information of a project, say https://www.designsafe-ci.org/data/browser/public/designsafe.storage.published/PRJ-3484,

#+begin_src shell :results raw
tapis files list agave://designsafe.storage.published/PRJ-3484
#+end_src

#+RESULTS:
+--------------------------------------------------+--------------+----------+
| name                                             | lastModified |   length |
+--------------------------------------------------+--------------+----------+
| CDSS_ResultsPlot.m                               | 2 months ago |     3780 |
| Direct Simple Shear Experimental Setup.pdf       | 2 months ago |   333090 |
| Direct Simple Shear Test Sensors.pdf             | 2 months ago |   132480 |
| Summary Report on Ottawa F65 Sand CDSS Tests.pdf | 2 months ago | 11470561 |
| eo_0_576_sigv_40_CSR_0_160_Tau_0_.csv            | 2 months ago |   367421 |
| eo_0_576_sigv_40_CSR_0_170_Tau_0_.csv            | 2 months ago |   266759 |
| eo_0_576_sigv_40_CSR_0_190_Tau_0_.csv            | 2 months ago |   133005 |
| eo_0_576_sigv_40_CSR_0_210_Tau_0_.csv            | 2 months ago |   106531 |
| eo_0_576_sigv_40_CSR_0_240_Tau_0_.csv            | 2 months ago |    73409 |
| eo_0_576_sigv_40_CSR_0_250_Tau_0_.csv            | 2 months ago |    48243 |
| eo_0_576_sigv_40_CSR_0_300_Tau_0_.csv            | 2 months ago |    20694 |
| eo_0_588_sigv_40_CSR_0_150_Tau_0_.csv            | 2 months ago |   426255 |
| eo_0_588_sigv_40_CSR_0_170_Tau_0_.csv            | 2 months ago |   145600 |
| eo_0_588_sigv_40_CSR_0_200_Tau_0_.csv            | 2 months ago |    75184 |
| eo_0_588_sigv_40_CSR_0_230_Tau_0_.csv            | 2 months ago |    57140 |
| eo_0_600_sigv_100_CSR_0_170_Tau_0_.csv           | 2 months ago |    76043 |
| eo_0_600_sigv_100_CSR_0_180_Tau_0_.csv           | 2 months ago |    39150 |
| eo_0_600_sigv_100_CSR_0_190_Tau_0_.csv           | 2 months ago |    24488 |
| eo_0_600_sigv_100_CSR_0_200_Tau_0_.csv           | 2 months ago |    29512 |
| eo_0_600_sigv_100_CSR_0_210_Tau_0_.csv           | 2 months ago |    20205 |
| eo_0_600_sigv_100_CSR_0_220_Tau_0_.csv           | 2 months ago |    19307 |
| eo_0_600_sigv_100_CSR_0_250_Tau_0_.csv           | 2 months ago |    11603 |
| eo_0_601_sigv_100_CSR_0_150_Tau_30_.csv          | 2 months ago |  1350936 |
| eo_0_601_sigv_100_CSR_0_150_Tau_40_.csv          | 2 months ago |   740401 |
| eo_0_601_sigv_100_CSR_0_200_Tau_30_.csv          | 2 months ago |   111957 |
| eo_0_601_sigv_100_CSR_0_200_Tau_40_.csv          | 2 months ago |   194061 |
| eo_0_601_sigv_100_CSR_0_250_Tau_30_.csv          | 2 months ago |    50388 |
| eo_0_601_sigv_100_CSR_0_250_Tau_40_.csv          | 2 months ago |    65815 |
| eo_0_601_sigv_100_CSR_0_300_Tau_30_.csv          | 2 months ago |    22568 |
| eo_0_601_sigv_100_CSR_0_300_Tau_40_.csv          | 2 months ago |    41252 |
| eo_0_601_sigv_40_CSR_0_150_Tau_0_.csv            | 2 months ago |   253281 |
| eo_0_601_sigv_40_CSR_0_170_Tau_0_.csv            | 2 months ago |    95541 |
| eo_0_601_sigv_40_CSR_0_190_Tau_0_.csv            | 2 months ago |    62701 |
| eo_0_601_sigv_40_CSR_0_200_Tau_0_.csv            | 2 months ago |    51772 |
| eo_0_601_sigv_40_CSR_0_200_Tau_10_.csv           | 2 months ago |   956617 |
| eo_0_601_sigv_40_CSR_0_210_Tau_0_.csv            | 2 months ago |    45227 |
| eo_0_601_sigv_40_CSR_0_220_Tau_0_.csv            | 2 months ago |    28760 |
| eo_0_601_sigv_40_CSR_0_220_Tau_10_.csv           | 2 months ago |   428522 |
| eo_0_601_sigv_40_CSR_0_220_Tau_15_.csv           | 2 months ago |  2254872 |
| eo_0_601_sigv_40_CSR_0_230_Tau_10_.csv           | 2 months ago |   351036 |
| eo_0_601_sigv_40_CSR_0_230_Tau_15_.csv           | 2 months ago |  1757060 |
| eo_0_601_sigv_40_CSR_0_240_Tau_10_.csv           | 2 months ago |   282245 |
| eo_0_601_sigv_40_CSR_0_250_Tau_0_.csv            | 2 months ago |    12117 |
| eo_0_601_sigv_40_CSR_0_250_Tau_10_.csv           | 2 months ago |   204689 |
| eo_0_601_sigv_40_CSR_0_250_Tau_15_.csv           | 2 months ago |   661142 |
| eo_0_601_sigv_40_CSR_0_270_Tau_10_.csv           | 2 months ago |   196049 |
| eo_0_601_sigv_40_CSR_0_270_Tau_15_.csv           | 2 months ago |   688310 |
| eo_0_601_sigv_40_CSR_0_300_Tau_10_.csv           | 2 months ago |    40408 |
| eo_0_601_sigv_40_CSR_0_300_Tau_15_.csv           | 2 months ago |   447705 |
| eo_0_601_sigv_40_CSR_0_320_Tau_15_.csv           | 2 months ago |   447356 |
| eo_0_601_sigv_40_CSR_0_350_Tau_15_.csv           | 2 months ago |   128002 |
| eo_0_631_sigv_40_CSR_0_100_Tau_0_.csv            | 2 months ago |   819420 |
| eo_0_631_sigv_40_CSR_0_120_Tau_0_.csv            | 2 months ago |   219298 |
| eo_0_631_sigv_40_CSR_0_140_Tau_0_.csv            | 2 months ago |   138572 |
| eo_0_631_sigv_40_CSR_0_150_Tau_0_.csv            | 2 months ago |    91315 |
| eo_0_631_sigv_40_CSR_0_170_Tau_0_.csv            | 2 months ago |    54473 |
| eo_0_631_sigv_40_CSR_0_180_Tau_0_.csv            | 2 months ago |    58544 |
| eo_0_631_sigv_40_CSR_0_190_Tau_0_.csv            | 2 months ago |    48529 |
+--------------------------------------------------+--------------+----------+

* Setting up a neo4j pod
Ref: https://tapis.readthedocs.io/en/latest/technical/pods.html

- [X] Create TACC Account
  + Username: =chahak=
- [X] Create Docker
  + Username: =chahak=
- [X] Install Tapis Python SDK
  #+begin_src shell
pipenv install tapipy
  #+end_src
- [X] TACC OAuth
  - [X] Create Tapis Client Object
    #+begin_src jupyter-python
import os
from tapipy.tapis import Tapis

t = Tapis(base_url="https://icicle.tapis.io",
          username=os.getenv("TACC_USERNAME"),
          password=os.getenv("TACC_PASSWORD"))

t.get_tokens()
t.access_token.access_token
    #+end_src

    #+RESULTS:
    : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...

  - [X] Check Access to the Tapis API
    #+begin_src jupyter-python
t.authenticator.get_profile(username=os.getenv("TACC_USERNAME"))
    #+end_src

    #+RESULTS:
    :
    : create_time: None
    : dn: cn=chahak,ou=People,dc=tacc,dc=utexas,dc=edu
    : email: chahak@utexas.edu
    : given_name: Chahak
    : last_name: Mehta
    : mobile_phone: None
    : phone: None
    : uid: 875122
    : username: chahak

- [X] Registering a templated Pod
  To register a pod, we use the ~pods.create_pod()~ method.
  #+begin_src jupyter-python
t.pods.create_pod(pod_id="tuitustestpod", pod_template="neo4j", description="Creating test pod")
  #+end_src

  #+RESULTS:
  #+begin_example

  command: None
  creation_ts: 2023-01-06T15:34:20.551402
  data_attached: []
  data_requests: []
  description: Creating test pod
  environment_variables:

  networking:
  default:
  port: 7687
  protocol: tcp
  url: tuitustestpod.pods.icicle.tapis.io
  persistent_volume:

  pod_id: tuitustestpod
  pod_template: neo4j
  resources:
  cpu_limit: 2000
  cpu_request: 250
  mem_limit: 3072
  mem_request: 256
  roles_inherited: []
  roles_required: []
  start_instance_ts: None
  status: REQUESTED
  status_container:

  status_requested: ON
  time_to_stop_default: 43200
  time_to_stop_instance: None
  time_to_stop_ts: None
  update_ts: 2023-01-06T15:34:20.551422
  #+end_example


The details and status of this =REQUESTED= pod can be accessed using the ~get_pod()~ method.
#+begin_src jupyter-python
t.pods.get_pod(pod_id="tuitustestpod")
#+end_src

#+RESULTS:
#+begin_example

command: None
creation_ts: 2023-01-06T15:34:20.551402
data_attached: []
data_requests: []
description: Creating test pod
environment_variables:

networking:
default:
port: 7687
protocol: tcp
url: tuitustestpod.pods.icicle.tapis.io
persistent_volume:

pod_id: tuitustestpod
pod_template: neo4j
resources:
cpu_limit: 2000
cpu_request: 250
mem_limit: 3072
mem_request: 256
roles_inherited: []
roles_required: []
start_instance_ts: 2023-01-06T16:06:34.268462
status: RUNNING
status_container:
message: Pod is running.
phase: Running
start_time: 2023-01-06T16:06:17.000000
status_requested: ON
time_to_stop_default: 43200
time_to_stop_instance: None
time_to_stop_ts: 2023-01-07T04:06:34.270380
update_ts: 2023-01-06T15:34:20.551422
#+end_example

The logs can be retrieved using the ~get_pod_logs()~ method.
#+begin_src jupyter-python
t.pods.get_pod_logs(pod_id="tuitustestpod")
#+end_src

#+RESULTS:
#+begin_example

logs: 2023-01-06 16:06:39.132+0000 INFO  Starting...
2023-01-06 16:06:40.347+0000 INFO  This instance is ServerId{e6102ec8} (e6102ec8-c9a0-4650-b0df-b523b7475f5a)
2023-01-06 16:06:42.487+0000 INFO  ======== Neo4j 4.4.16 ========
2023-01-06 16:06:48.846+0000 INFO  [system/00000000] successfully initialized: CREATE USER podsservice IF NOT EXISTS SET PLAINTEXT PASSWORD 'servicepass' SET PASSWORD CHANGE NOT REQUIRED
2023-01-06 16:06:49.145+0000 INFO  [system/00000000] successfully initialized: CREATE USER tuitustestpod IF NOT EXISTS SET PLAINTEXT PASSWORD 'userpass' SET PASSWORD CHANGE NOT REQUIRED
2023-01-06 16:06:56.019+0000 INFO  Upgrading security graph to latest version
2023-01-06 16:06:56.020+0000 INFO  Setting version for 'security-users' to 2
2023-01-06 16:06:56.022+0000 INFO  Upgrading 'security-users' version property from 2 to 3
2023-01-06 16:06:56.283+0000 INFO  Called db.clearQueryCaches(): Query cache already empty.
2023-01-06 16:06:56.439+0000 INFO  Bolt enabled on [0:0:0:0:0:0:0:0%0]:7687.
2023-01-06 16:06:57.632+0000 INFO  Remote interface available at http://pods-tacc-icicle-tuitustestpod:7474/
2023-01-06 16:06:57.637+0000 INFO  id: 8ACF4A544C1C241897F7E92DEED8D4D2266674C622192A7F52378EF69EA3644A
2023-01-06 16:06:57.637+0000 INFO  name: system
2023-01-06 16:06:57.637+0000 INFO  creationDate: 2023-01-06T16:06:43.669Z
2023-01-06 16:06:57.637+0000 INFO  Started.
#+end_example

List of all pods - ~get_pods()~
#+begin_src jupyter-python :results raw drawer
print(t.pods.get_pods())
#+end_src

#+RESULTS:
:results:
#+begin_example
[
command: None
creation_ts: 2023-01-06T15:34:20.551402
data_attached: []
data_requests: []
description: Creating test pod
environment_variables: 

networking: 
default: 
port: 7687
protocol: tcp
url: tuitustestpod.pods.icicle.tapis.io
persistent_volume: 

pod_id: tuitustestpod
pod_template: neo4j
resources: 
cpu_limit: 2000
cpu_request: 250
mem_limit: 3072
mem_request: 256
roles_inherited: []
roles_required: []
start_instance_ts: 2023-01-06T16:06:34.268462
status: RUNNING
status_container: 
message: Pod is running.
phase: Running
start_time: 2023-01-06T16:06:17.000000
status_requested: ON
time_to_stop_default: 43200
time_to_stop_instance: None
time_to_stop_ts: 2023-01-07T04:06:34.270380
update_ts: 2023-01-06T15:34:20.551422]
#+end_example
:end:


Any pod can be deleted using the ~delete_pod(pod_id)~ method.
#+begin_src jupyter-python :results raw
t.pods.delete_pod(pod_id="tuitustestpod")
#+end_src

#+RESULTS:
| message | : | Pod successfully deleted. | metadata | : | nil | result | : |   | status | : | success | version | : | dev |
* Fetching file information using =tapipy=
+ Create ~Tapis~ object and generate a token.
  #+begin_src jupyter-python
import os
from tapipy.tapis import Tapis

t = Tapis(base_url="https://designsafe.tapis.io",
          username=os.getenv("TACC_USERNAME"),
          password=os.getenv("TACC_PASSWORD"))
t.get_tokens()
# t.access_token
  #+end_src

  #+RESULTS:

  Using the ~systemId~ as =designsafe.storage.default=, fetch files.
  #+begin_src jupyter-python
t.files.listFiles(systemId="designsafe.storage.default", path="chahak")
  #+end_src

  #+RESULTS:
  :RESULTS:
  # [goto error]
  #+begin_example
  ---------------------------------------------------------------------------
  NotFoundError                             Traceback (most recent call last)
  Cell In[6], line 1
  ----> 1 t.files.listFiles(systemId="designsafe.storage.default", path="chahak")

  File ~/.local/share/virtualenvs/tuitus-75BIUZJs/lib/python3.9/site-packages/tapipy/tapis.py:1191, in Operation.__call__(self, **kwargs)
     1189     raise errors.ForbiddenError(msg=error_msg, version=version, request=r, response=resp)
     1190 if resp.status_code == 404:
  -> 1191     raise errors.NotFoundError(msg=error_msg, version=version, request=r, response=resp)
     1192 if resp.status_code == 503:
     1193     raise errors.ServiceUnavailableError(msg=error_msg, version=version, request=r, response=resp)

  NotFoundError: message: SYSAPI_NOT_FOUND Record not found. jwtTenant: admin jwtUser: files OboTenant: designsafe OboUser: chahak System: designsafe.storage.default
  #+end_example
  :END:

  Seems like tapipy is using v3 apis which doesn't seem to have any systems that it retrieves via ~getSystems()~ on =designsafe=. Not sure if I can work with this right now.
* Get model configurations for experiments
+ I'm trying to find a way to get information about the model configurations and experiment setup on this page. I found using inspect element that there is an API call to https://www.designsafe-ci.org/api/projects/publication/PRJ-3484/ and that has a field for =modelConfigs= that has experiments but it has =associationIds= which are UUIDs if I'm not wrong, and the above API is the only way I could find to resolve UUIDs but it doesn't seem to be working.
+ According to Dr. Krishna, UUID lookup is not available in designsafe yet so letting this be for now.
* Use ~requests~ module to retrieve files for projects
+ Even without model configs for experiments, next thing to do is to get all the files for all the projects.
** Get a list of projects
Using the ~requests~ module, we can create a request to =https://designsafe-ci.org/api/publications/listing= to get a list of the projects.

#+begin_src jupyter-python
from pprint import pprint
import requests

url = "https://designsafe-ci.org/api/publications/listing"

querystring = {"limit":"3"}

payload = ""
headers = {
    # "cookie": "django_language=en-us",
    # "Host": "www.designsafe-ci.org",
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:108.0) Gecko/20100101 Firefox/108.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br",
    "DNT": "1",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "none",
    "Sec-Fetch-User": "?1",
    "TE": "trailers"
}

response = requests.request("GET", url, data=payload, headers=headers, params=querystring)

pprint(response.json())
#+end_src

#+RESULTS:
#+begin_example
{'listing': [{'created': '2023-01-09T21:13:07.982682',
              'pi': 'Zhang, Wenyang',
              'project': {'value': {'keywords': 'Physics-based ground motion '
                                                'simulation, loss and '
                                                'resilience assessments, '
                                                'regional analysis, Hercules, '
                                                'SimCenter R2D',
                                    'pi': 'wz_tacc',
                                    'projectType': 'simulation',
                                    'title': 'Regional-scale physics-based '
                                             'ground motion simulation for '
                                             'Istanbul, Turkey'}},
              'projectId': 'PRJ-3712'},
             {'created': '2023-01-09T18:06:55.086860',
              'pi': 'Akin, Idil Deniz',
              'project': {'value': {'keywords': 'suction, water content, '
                                                'post-wildfire',
                                    'pi': 'idil',
                                    'projectType': 'field_recon',
                                    'title': '2019 Williams Flats Wildfire '
                                             'Slope Stability'}},
              'projectId': 'PRJ-3685'},
             {'created': '2023-01-09T01:52:04.001722',
              'pi': 'Matta, Fabio',
              'project': {'value': {'keywords': 'Compressive strength, earth '
                                                'masonry, isotropy, '
                                                'homogeneity, statistical '
                                                'analysis',
                                    'pi': 'fmatta',
                                    'projectType': 'experimental',
                                    'title': 'Physico-Mechanical '
                                             'Characterization of Homogeneity '
                                             'and Isotropy of Prototype Earth '
                                             'Block Material'}},
              'projectId': 'PRJ-2809'}]}
#+end_example


** Get files for a project

For a given =projectId=, we need to get all the result files. The information for projects can be fetched from =https://designsafe-ci.org/api/projects/publication/{projectId}=. For example,

#+begin_src jupyter-python
projectId = "PRJ-3484"
url = f"https://designsafe-ci.org/api/projects/publication/{projectId}"

payload = ""
headers = {"cookie": "django_language=en-us"}

response = requests.request("GET", url, data=payload, headers=headers)
response_json = response.json()
#+end_src

#+RESULTS:

+ The response is a humongous \sym 1300 lines json object which contains basically all the information about the project that is present on the website. The fields of major importance right now would be ~["eventsList"]~. This corresponds to the different experiment setups.
+ For every element in ~"eventsList"~, ~"fileObjs"~ is the list of files for that experiment, ~["value"]["title"]~ is the title string of the experiment.

#+begin_src jupyter-python
files_info = dict()
for i, event in enumerate(response_json["eventsList"]):
    files_info[i] = {
        "title": event["value"]["title"],
        "files": event["fileObjs"]
        }
pprint(files_info[0])
#+end_src

#+RESULTS:
#+begin_example
{'files': [{'name': 'eo_0_601_sigv_100_CSR_0_150_Tau_40_.csv',
            'path': '/eo_0_601_sigv_100_CSR_0_150_Tau_40_.csv',
            'system': 'project-3122606422211489300-242ac118-0001-012',
            'type': 'file'},
           {'name': 'eo_0_601_sigv_100_CSR_0_200_Tau_40_.csv',
            'path': '/eo_0_601_sigv_100_CSR_0_200_Tau_40_.csv',
            'system': 'project-3122606422211489300-242ac118-0001-012',
            'type': 'file'},
           {'name': 'eo_0_601_sigv_100_CSR_0_250_Tau_40_.csv',
            'path': '/eo_0_601_sigv_100_CSR_0_250_Tau_40_.csv',
            'system': 'project-3122606422211489300-242ac118-0001-012',
            'type': 'file'},
           {'name': 'eo_0_601_sigv_100_CSR_0_300_Tau_40_.csv',
            'path': '/eo_0_601_sigv_100_CSR_0_300_Tau_40_.csv',
            'system': 'project-3122606422211489300-242ac118-0001-012',
            'type': 'file'}],
 'title': 'CDSS tests with Sig_v = 100 kPa, Dr = 67%, Alpha = 0.4'}
#+end_example

Now, to download any of those file, I can either create a request manually or use ~tapis cli~ to download it.

#+begin_src bash
tapis files download agave://designsafe.storage.published/PRJ-3484/eo_0_631_sigv_40_CSR_0_190_Tau_0_.csv
#+end_src

#+RESULTS:

~tapis cli~ doesn't seem to allow specifying an output directory to save the file to, which is definitely not great as I'll have to either move them myself or change directory every time before saving the file. On the other hand, it has some support for multi-threaded downloads. Need more investigation on this.

On the other hand, ~tapis cli~ uses ~agavepy~ to download the files. So, for now, I could potentially use that directly to download these files.

#+begin_src jupyter-python
from agavepy import Agave
ag = Agave.restore()
#+end_src

#+RESULTS:

#+begin_src jupyter-python
rsp = ag.files.download(systemId="designsafe.storage.published", filePath="PRJ-3484/eo_0_631_sigv_40_CSR_0_190_Tau_0_.csv")
if isinstance(rsp, dict):
    raise Error(f"Failed to download")
with open('test.csv', 'wb') as dest_file:
    for block in rsp.iter_content(4096):
        if not block:
            break
        dest_file.write(block)

print(os.path.isfile('test.csv'))
#+end_src

#+RESULTS:
: True

This tests works. So, I can create a function to do this and create a folder structure with files based on the experiment titles.

** Download entire project info together
Now it is time to combine all of the above together to get all the files of a project in a single go.

#+begin_src jupyter-python
import os
import requests
from tqdm import tqdm
from agavepy import Agave
ag = Agave.restore()


def download_file(filepath, dirpath):
    rsp = ag.files.download(systemId="designsafe.storage.published",
                            filePath=filepath)
    if isinstance(rsp, dict):
        raise Error(f"Failed to download: {filepath}")
    if not os.path.isdir(dirpath):
        os.makedirs(dirpath)
    with open(os.path.join(dirpath, os.path.basename(filepath)), "wb") as f:
        try:
            for block in rsp.iter_content(4096):
                if not block:
                    break
                f.write(block)
        except Exception as e:
            raise e
    return True


def download_project(projectId):
    url = f"https://designsafe-ci.org/api/projects/publication/{projectId}"

    payload = ""
    headers = ""

    response = requests.get(url, data=payload, headers=headers)
    response_json = response.json()

    files_info = dict()
    for i, event in enumerate(response_json["eventsList"]):
        files_info[i] = {
            "title": event["value"]["title"],
            "files": event["fileObjs"],
        }

    for event, data in tqdm(files_info.items()):
        dirpath = f"{projectId}/{data['title']}"
        for file in tqdm(data["files"], leave=False):
            filepath = f"{projectId}/{file['path']}"
            download_file(filepath, dirpath)

    return


projectId = "PRJ-3484"
download_project(projectId)
#+end_src

This downloads the project files and stores the files in the following structure.

#+begin_src bash :results raw
tree PRJ-3484
#+end_src

#+RESULTS:
#+begin_example
PRJ-3484
├── CDSS tests with Sig_v = 100 kPa, Dr = 66.7%, Alpha = 0
│   ├── eo_0_600_sigv_100_CSR_0_170_Tau_0_.csv
│   ├── eo_0_600_sigv_100_CSR_0_180_Tau_0_.csv
│   ├── eo_0_600_sigv_100_CSR_0_190_Tau_0_.csv
│   ├── eo_0_600_sigv_100_CSR_0_200_Tau_0_.csv
│   ├── eo_0_600_sigv_100_CSR_0_210_Tau_0_.csv
│   ├── eo_0_600_sigv_100_CSR_0_220_Tau_0_.csv
│   └── eo_0_600_sigv_100_CSR_0_250_Tau_0_.csv
├── CDSS tests with Sig_v = 100 kPa, Dr = 67%, Alpha = 0.3
│   ├── eo_0_601_sigv_100_CSR_0_150_Tau_30_.csv
│   ├── eo_0_601_sigv_100_CSR_0_200_Tau_30_.csv
│   ├── eo_0_601_sigv_100_CSR_0_250_Tau_30_.csv
│   └── eo_0_601_sigv_100_CSR_0_300_Tau_30_.csv
├── CDSS tests with Sig_v = 100 kPa, Dr = 67%, Alpha = 0.4
│   ├── eo_0_601_sigv_100_CSR_0_150_Tau_40_.csv
│   ├── eo_0_601_sigv_100_CSR_0_200_Tau_40_.csv
│   ├── eo_0_601_sigv_100_CSR_0_250_Tau_40_.csv
│   └── eo_0_601_sigv_100_CSR_0_300_Tau_40_.csv
├── CDSS tests with Sig_v = 40 kPa, Dr = 55.2%, Alpha = 0
│   ├── eo_0_631_sigv_40_CSR_0_100_Tau_0_.csv
│   ├── eo_0_631_sigv_40_CSR_0_120_Tau_0_.csv
│   ├── eo_0_631_sigv_40_CSR_0_140_Tau_0_.csv
│   ├── eo_0_631_sigv_40_CSR_0_150_Tau_0_.csv
│   ├── eo_0_631_sigv_40_CSR_0_170_Tau_0_.csv
│   ├── eo_0_631_sigv_40_CSR_0_180_Tau_0_.csv
│   └── eo_0_631_sigv_40_CSR_0_190_Tau_0_.csv
├── CDSS tests with Sig_v = 40 kPa, Dr = 66.2%, Alpha = 0
│   ├── eo_0_601_sigv_40_CSR_0_150_Tau_0_.csv
│   ├── eo_0_601_sigv_40_CSR_0_170_Tau_0_.csv
│   ├── eo_0_601_sigv_40_CSR_0_190_Tau_0_.csv
│   ├── eo_0_601_sigv_40_CSR_0_200_Tau_0_.csv
│   ├── eo_0_601_sigv_40_CSR_0_210_Tau_0_.csv
│   ├── eo_0_601_sigv_40_CSR_0_220_Tau_0_.csv
│   └── eo_0_601_sigv_40_CSR_0_250_Tau_0_.csv
├── CDSS tests with Sig_v = 40 kPa, Dr = 66.4%, Alpha = 0.25
│   ├── eo_0_601_sigv_40_CSR_0_200_Tau_10_.csv
│   ├── eo_0_601_sigv_40_CSR_0_220_Tau_10_.csv
│   ├── eo_0_601_sigv_40_CSR_0_230_Tau_10_.csv
│   ├── eo_0_601_sigv_40_CSR_0_240_Tau_10_.csv
│   ├── eo_0_601_sigv_40_CSR_0_250_Tau_10_.csv
│   ├── eo_0_601_sigv_40_CSR_0_270_Tau_10_.csv
│   └── eo_0_601_sigv_40_CSR_0_300_Tau_10_.csv
├── CDSS tests with Sig_v = 40 kPa, Dr = 66.4%, Alpha = 0.375
│   ├── eo_0_601_sigv_40_CSR_0_220_Tau_15_.csv
│   ├── eo_0_601_sigv_40_CSR_0_230_Tau_15_.csv
│   ├── eo_0_601_sigv_40_CSR_0_250_Tau_15_.csv
│   ├── eo_0_601_sigv_40_CSR_0_270_Tau_15_.csv
│   ├── eo_0_601_sigv_40_CSR_0_300_Tau_15_.csv
│   ├── eo_0_601_sigv_40_CSR_0_320_Tau_15_.csv
│   └── eo_0_601_sigv_40_CSR_0_350_Tau_15_.csv
├── CDSS tests with Sig_v = 40 kPa, Dr = 71.2%, Alpha = 0
│   ├── eo_0_588_sigv_40_CSR_0_150_Tau_0_.csv
│   ├── eo_0_588_sigv_40_CSR_0_170_Tau_0_.csv
│   ├── eo_0_588_sigv_40_CSR_0_200_Tau_0_.csv
│   └── eo_0_588_sigv_40_CSR_0_230_Tau_0_.csv
└── CDSS tests with Sig_v = 40 kPa, Dr = 75.5%, Alpha = 0
    ├── eo_0_576_sigv_40_CSR_0_160_Tau_0_.csv
    ├── eo_0_576_sigv_40_CSR_0_170_Tau_0_.csv
    ├── eo_0_576_sigv_40_CSR_0_190_Tau_0_.csv
    ├── eo_0_576_sigv_40_CSR_0_210_Tau_0_.csv
    ├── eo_0_576_sigv_40_CSR_0_240_Tau_0_.csv
    ├── eo_0_576_sigv_40_CSR_0_250_Tau_0_.csv
    └── eo_0_576_sigv_40_CSR_0_300_Tau_0_.csv

10 directories, 54 files
#+end_example
